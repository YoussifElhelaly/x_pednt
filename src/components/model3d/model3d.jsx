/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 ./public/A1-A4/A1.glb 
*/

import React, { useEffect, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useLoader } from '@react-three/fiber';
import { GLTFLoader } from 'three/examples/jsm/Addons.js';
import * as THREE from 'three';
import { useRecoilState, useRecoilValue } from 'recoil';
import selectFrameAtom from '../../atoms/selectFrame';
import faceColorAtom from '../../atoms/faceColor';
import armColorAtom from '../../atoms/armColor';


export function Model3d(props) {
  // const { nodes, materials } = useGLTF('/A1-A4/A1.glb')
  const [armColor , setArmColor] = useRecoilState(armColorAtom)
  const [faceColor , setFaceColor] = useRecoilState(faceColorAtom)
  const selectFrameValue = useRecoilValue(selectFrameAtom)
  const [gltf , setGltf] = useState(useLoader(GLTFLoader, '/A1-A4/A1.glb'))

  useEffect(() => {
      if(selectFrameValue ==1) {
        setGltf(useLoader(GLTFLoader, '/A1-A4/A1.glb'));
        gltf.scene.traverse((child) => {
            if (child.name == "???-??1001" && child.isMesh) {
                child.material.color = new THREE.Color(armColor); // Change color to red
                child.material.needsUpdate = true;
            }
            if (child.name == "mesh046" && child.isMesh) {
                child.material.color = new THREE.Color(faceColor); // Change color to red
                child.material.needsUpdate = true;
            }
        });
    } else if(selectFrameValue == 2) {
        setGltf(useLoader(GLTFLoader, '/A1-A4/A2.glb'));
        gltf.scene.traverse((child) => {
            if (child.name == "平面003" && child.isMesh) {
              child.material.color = new THREE.Color(armColor); // Change color to red
              child.material.needsUpdate = true;
            }
            if (child.name == "平面011" && child.isMesh) {
              child.material.color = new THREE.Color(faceColor); // Change color to red
              child.material.needsUpdate = true;
            }
          });
    }

        // gltf.scene.current.parent.remove(gltf.current);
    }, [gltf , armColor,faceColor ,selectFrameValue]);

  return (
    <>
      <primitive object={gltf.scene}/>
    </>
  
  )
}

useGLTF.preload('/A1-A4/A1.glb')
